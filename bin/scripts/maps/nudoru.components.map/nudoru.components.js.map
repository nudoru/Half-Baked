{"version":3,"sources":["ComponentEvents.js","MessageBoxCreator.js","MessageBoxView.js","ModalCoverView.js","ToastView.js","ToolTipView.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhjfile":"nudoru.components.js","sourcesContent":["define('nudoru/component/ComponentEvents',\n  function (require, module, exports) {\n\n    var objUtils = require('nudoru/core/ObjectUtils');\n\n    _.merge(module.exports, objUtils.keyMirror({\n      MODAL_COVER_SHOW: null,\n      MODAL_COVER_HIDE: null,\n      MENU_SELECT     : null\n    }));\n\n\n  });","define('nudoru/component/MessageBoxCreator',\n  function (require, module, exports) {\n\n    var MessageBoxCreator = function () {\n\n      var _messageBoxView = require('nudoru/component/MessageBoxView');\n\n      function alert(title, message, modal, cb) {\n        return _messageBoxView.add({\n          title  : title,\n          content: '<p>' + message + '</p>',\n          type   : _messageBoxView.type().DANGER,\n          modal  : modal,\n          width  : 400,\n          buttons: [\n            {\n              label  : 'Close',\n              id     : 'Close',\n              type   : '',\n              icon   : 'times',\n              onClick: cb\n            }\n          ]\n        });\n      }\n\n      function confirm(title, message, okCB, modal) {\n        return _messageBoxView.add({\n          title  : title,\n          content: '<p>' + message + '</p>',\n          type   : _messageBoxView.type().DEFAULT,\n          modal  : modal,\n          width  : 400,\n          buttons: [\n            {\n              label: 'Cancel',\n              id   : 'Cancel',\n              type : 'negative',\n              icon : 'times'\n            },\n            {\n              label  : 'Proceed',\n              id     : 'proceed',\n              type   : 'positive',\n              icon   : 'check',\n              onClick: okCB\n            }\n          ]\n        });\n      }\n\n      function prompt(title, message, okCB, modal) {\n        return _messageBoxView.add({\n          title  : title,\n          content: '<p class=\"text-center padding-bottom-double\">' + message + '</p><textarea name=\"response\" class=\"input-text\" type=\"text\" style=\"width:400px; height:75px; resize: none\" autofocus=\"true\"></textarea>',\n          type   : _messageBoxView.type().DEFAULT,\n          modal  : modal,\n          width  : 450,\n          buttons: [\n            {\n              label: 'Cancel',\n              id   : 'Cancel',\n              type : 'negative',\n              icon : 'times'\n            },\n            {\n              label  : 'Proceed',\n              id     : 'proceed',\n              type   : 'positive',\n              icon   : 'check',\n              onClick: okCB\n            }\n          ]\n        });\n      }\n\n      function choice(title, message, selections, okCB, modal) {\n        var selectHTML = '<select class=\"spaced\" style=\"width:450px;height:200px\" name=\"selection\" autofocus=\"true\" size=\"20\">';\n\n        selections.forEach(function (opt) {\n          selectHTML += '<option value=\"' + opt.value + '\" ' + (opt.selected === 'true' ? 'selected' : '') + '>' + opt.label + '</option>';\n        });\n\n        selectHTML += '</select>';\n\n        return _messageBoxView.add({\n          title  : title,\n          content: '<p class=\"text-center padding-bottom-double\">' + message + '</p><div class=\"text-center\">' + selectHTML + '</div>',\n          type   : _messageBoxView.type().DEFAULT,\n          modal  : modal,\n          width  : 500,\n          buttons: [\n            {\n              label: 'Cancel',\n              id   : 'Cancel',\n              type : 'negative',\n              icon : 'times'\n            },\n            {\n              label  : 'OK',\n              id     : 'ok',\n              type   : 'positive',\n              icon   : 'check',\n              onClick: okCB\n            }\n          ]\n        });\n      }\n\n      return {\n        alert  : alert,\n        confirm: confirm,\n        prompt : prompt,\n        choice : choice\n      };\n\n    };\n\n    module.exports = MessageBoxCreator();\n\n  });","/**\n * Simple popup message box module\n *\n * Created by matt on 5/5/15\n */\n\ndefine('nudoru/component/MessageBoxView',\n  function (require, module, exports) {\n\n    var MessageBoxView = function () {\n\n      var _children               = [],\n          _counter                = 0,\n          _highestZ               = 1000,\n          _defaultWidth           = 400,\n          _types                  = {\n            DEFAULT    : 'default',\n            INFORMATION: 'information',\n            SUCCESS    : 'success',\n            WARNING    : 'warning',\n            DANGER     : 'danger'\n          },\n          _typeStyleMap           = {\n            'default'    : '',\n            'information': 'messagebox__information',\n            'success'    : 'messagebox__success',\n            'warning'    : 'messagebox__warning',\n            'danger'     : 'messagebox__danger'\n          },\n          _mountPoint,\n          _buttonIconTemplateID   = 'template__messagebox--button-icon',\n          _buttonNoIconTemplateID = 'template__messagebox--button-noicon',\n          _template               = require('nori/utils/Templating'),\n          _modal                  = require('nudoru/component/ModalCoverView'),\n          _browserInfo            = require('nudoru/browser/BrowserInfo'),\n          _domUtils               = require('nudoru/browser/DOMUtils'),\n          _componentUtils         = require('nudoru/browser/ThreeDTransforms');\n\n      /**\n       * Initialize and set the mount point / box container\n       * @param elID\n       */\n      function initialize(elID) {\n        _mountPoint = document.getElementById(elID);\n      }\n\n      /**\n       * Add a new message box\n       * @param initObj\n       * @returns {*}\n       */\n      function add(initObj) {\n        var type   = initObj.type || _types.DEFAULT,\n            boxObj = createBoxObject(initObj);\n\n        // setup\n        _children.push(boxObj);\n        _mountPoint.appendChild(boxObj.element);\n        assignTypeClassToElement(type, boxObj.element);\n        configureButtons(boxObj);\n\n        _componentUtils.applyUnique3DToElement(boxObj.element);\n\n        // Set 3d CSS props for in/out transition\n        TweenLite.set(boxObj.element, {\n          css: {\n            zIndex: _highestZ,\n            width : initObj.width ? initObj.width : _defaultWidth\n          }\n        });\n\n        // center after width has been set\n        _domUtils.centerElementInViewPort(boxObj.element);\n\n        // Make it draggable\n        Draggable.create('#' + boxObj.id, {\n          bounds : window,\n          onPress: function () {\n            _highestZ = Draggable.zIndex;\n          }\n        });\n\n        // Show it\n        transitionIn(boxObj.element);\n\n        // Show the modal cover\n        if (initObj.modal) {\n          _modal.showNonDismissable(true);\n        }\n\n        return boxObj.id;\n      }\n\n      /**\n       * Assign a type class to it\n       * @param type\n       * @param element\n       */\n      function assignTypeClassToElement(type, element) {\n        if (type !== 'default') {\n          _domUtils.addClass(element, _typeStyleMap[type]);\n        }\n      }\n\n      /**\n       * Create the object for a box\n       * @param initObj\n       * @returns {{dataObj: *, id: string, modal: (*|boolean), element: *, streams: Array}}\n       */\n      function createBoxObject(initObj) {\n        var id  = 'js__messagebox-' + (_counter++).toString(),\n            obj = {\n              dataObj: initObj,\n              id     : id,\n              modal  : initObj.modal,\n              element: _template.asElement('template__messagebox--default', {\n                id     : id,\n                title  : initObj.title,\n                content: initObj.content\n              }),\n              streams: []\n            };\n\n        return obj;\n      }\n\n      /**\n       * Set up the buttons\n       * @param boxObj\n       */\n      function configureButtons(boxObj) {\n        var buttonData = boxObj.dataObj.buttons;\n\n        // default button if none\n        if (!buttonData) {\n          buttonData = [{\n            label: 'Close',\n            type : '',\n            icon : 'times',\n            id   : 'default-close'\n          }];\n        }\n\n        var buttonContainer = boxObj.element.querySelector('.footer-buttons');\n\n        _domUtils.removeAllElements(buttonContainer);\n\n        buttonData.forEach(function makeButton(buttonObj) {\n          buttonObj.id = boxObj.id + '-button-' + buttonObj.id;\n\n          var buttonEl;\n\n          if (buttonObj.hasOwnProperty('icon')) {\n            buttonEl = _template.asElement(_buttonIconTemplateID, buttonObj);\n          } else {\n            buttonEl = _template.asElement(_buttonNoIconTemplateID, buttonObj);\n          }\n\n          buttonContainer.appendChild(buttonEl);\n\n          var btnStream = Rx.Observable.fromEvent(buttonEl, _browserInfo.mouseClickEvtStr())\n            .subscribe(function () {\n              if (buttonObj.hasOwnProperty('onClick')) {\n                if (buttonObj.onClick) {\n                  buttonObj.onClick.call(this, captureFormData(boxObj.id));\n                }\n              }\n              remove(boxObj.id);\n            });\n          boxObj.streams.push(btnStream);\n        });\n\n      }\n\n      /**\n       * Returns data from the form on the box contents\n       * @param boxID\n       * @returns {*}\n       */\n      function captureFormData(boxID) {\n        return _domUtils.captureFormData(getObjByID(boxID).element);\n      }\n\n      /**\n       * Remove a box from the screen / container\n       * @param id\n       */\n      function remove(id) {\n        var idx = getObjIndexByID(id),\n            boxObj;\n\n        if (idx > -1) {\n          boxObj = _children[idx];\n          transitionOut(boxObj.element);\n        }\n      }\n\n      /**\n       * Show the box\n       * @param el\n       */\n      function transitionIn(el) {\n        TweenLite.to(el, 0, {alpha: 0, rotationX: 45, scale: 2});\n        TweenLite.to(el, 0.5, {\n          alpha    : 1,\n          rotationX: 0,\n          scale    : 1,\n          ease     : Circ.easeOut\n        });\n      }\n\n      /**\n       * Remove the box\n       * @param el\n       */\n      function transitionOut(el) {\n        TweenLite.to(el, 0.25, {\n          alpha    : 0,\n          rotationX: -45,\n          scale    : 0.25,\n          ease     : Circ.easeIn, onComplete: function () {\n            onTransitionOutComplete(el);\n          }\n        });\n      }\n\n      /**\n       * Clean up after the transition out animation\n       * @param el\n       */\n      function onTransitionOutComplete(el) {\n        var idx    = getObjIndexByID(el.getAttribute('id')),\n            boxObj = _children[idx];\n\n        boxObj.streams.forEach(function (stream) {\n          stream.dispose();\n        });\n\n        Draggable.get('#' + boxObj.id).disable();\n\n        _mountPoint.removeChild(el);\n\n        _children[idx] = null;\n        _children.splice(idx, 1);\n\n        checkModalStatus();\n      }\n\n      /**\n       * Determine if any open boxes have modal true\n       */\n      function checkModalStatus() {\n        var isModal = false;\n\n        _children.forEach(function (boxObj) {\n          if (boxObj.modal === true) {\n            isModal = true;\n          }\n        });\n\n        if (!isModal) {\n          _modal.hide(true);\n        }\n      }\n\n      /**\n       * Utility to get the box object index by ID\n       * @param id\n       * @returns {number}\n       */\n      function getObjIndexByID(id) {\n        return _children.map(function (child) {\n          return child.id;\n        }).indexOf(id);\n      }\n\n      /**\n       * Utility to get the box object by ID\n       * @param id\n       * @returns {number}\n       */\n      function getObjByID(id) {\n        return _children.filter(function (child) {\n          return child.id === id;\n        })[0];\n      }\n\n      function getTypes() {\n        return _types;\n      }\n\n      return {\n        initialize: initialize,\n        add       : add,\n        remove    : remove,\n        type      : getTypes\n      };\n\n    };\n\n    module.exports = MessageBoxView();\n\n  });","/**\n * Created 2/?/15\n * Last updated 7/9/15\n */\n\ndefine('nudoru/component/ModalCoverView',\n  function (require, module, exports) {\n\n    var ModalCoverView = function () {\n\n      var _mountPoint      = document,\n          _modalCoverEl,\n          _modalBackgroundEl,\n          _modalCloseButtonEl,\n          _modalClickStream,\n          _isVisible,\n          _notDismissable,\n          _browserInfo     = require('nudoru/browser/BrowserInfo');\n\n      function initialize() {\n\n        _isVisible = true;\n\n        _modalCoverEl       = _mountPoint.getElementById('modal__cover');\n        _modalBackgroundEl  = _mountPoint.querySelector('.modal__background');\n        _modalCloseButtonEl = _mountPoint.querySelector('.modal__close-button');\n\n        var modalBGClick     = Rx.Observable.fromEvent(_modalBackgroundEl, _browserInfo.mouseClickEvtStr()),\n            modalButtonClick = Rx.Observable.fromEvent(_modalCloseButtonEl, _browserInfo.mouseClickEvtStr());\n\n        _modalClickStream = Rx.Observable.merge(modalBGClick, modalButtonClick)\n          .subscribe(function () {\n            onModalClick();\n          });\n\n        hide(false);\n      }\n\n      function getIsVisible() {\n        return _isVisible;\n      }\n\n      function onModalClick() {\n        if (_notDismissable) return;\n        hide(true);\n      }\n\n      function showModalCover(shouldAnimate) {\n        _isVisible   = true;\n        var duration = shouldAnimate ? 0.25 : 0;\n        TweenLite.to(_modalCoverEl, duration, {\n          autoAlpha: 1,\n          ease     : Quad.easeOut\n        });\n        TweenLite.to(_modalBackgroundEl, duration, {\n          alpha: 1,\n          ease : Quad.easeOut\n        });\n      }\n\n      function show(shouldAnimate) {\n        if (_isVisible) {\n          return;\n        }\n\n        _notDismissable = false;\n\n        showModalCover(shouldAnimate);\n\n        TweenLite.set(_modalCloseButtonEl, {scale: 2, alpha: 0});\n        TweenLite.to(_modalCloseButtonEl, 1, {\n          autoAlpha: 1,\n          scale    : 1,\n          ease     : Bounce.easeOut,\n          delay    : 1\n        });\n      }\n\n      /**\n       * A 'hard' modal view cannot be dismissed with a click, must be via code\n       * @param shouldAnimate\n       */\n      function showNonDismissable(shouldAnimate) {\n        if (_isVisible) {\n          return;\n        }\n\n        _notDismissable = true;\n\n        showModalCover(shouldAnimate);\n        TweenLite.to(_modalCloseButtonEl, 0, {autoAlpha: 0});\n      }\n\n      function hide(shouldAnimate) {\n        if (!_isVisible) {\n          return;\n        }\n        _isVisible      = false;\n        _notDismissable = false;\n        var duration    = shouldAnimate ? 0.25 : 0;\n        TweenLite.killDelayedCallsTo(_modalCloseButtonEl);\n        TweenLite.to(_modalCoverEl, duration, {\n          autoAlpha: 0,\n          ease     : Quad.easeOut\n        });\n        TweenLite.to(_modalCloseButtonEl, duration / 2, {\n          autoAlpha: 0,\n          ease     : Quad.easeOut\n        });\n\n      }\n\n      function setOpacity(opacity) {\n        if (opacity < 0 || opacity > 1) {\n          console.log('nudoru/component/ModalCoverView: setOpacity: opacity should be between 0 and 1');\n          opacity = 1;\n        }\n        TweenLite.to(_modalBackgroundEl, 0.25, {\n          alpha: opacity,\n          ease : Quad.easeOut\n        });\n      }\n\n      function setColor(r, g, b) {\n        TweenLite.to(_modalBackgroundEl, 0.25, {\n          backgroundColor: 'rgb(' + r + ',' + g + ',' + b + ')',\n          ease           : Quad.easeOut\n        });\n      }\n\n      return {\n        initialize        : initialize,\n        show              : show,\n        showNonDismissable: showNonDismissable,\n        hide              : hide,\n        visible           : getIsVisible,\n        setOpacity        : setOpacity,\n        setColor          : setColor\n      };\n\n    };\n\n    module.exports = ModalCoverView();\n\n  });","/**\n * Created by matt on 12/1/14\n * last updated 5/5/15\n */\n\ndefine('nudoru/component/ToastView',\n  function (require, module, exports) {\n\n    var ToastView = function () {\n\n      var _children              = [],\n          _counter               = 0,\n          _defaultExpireDuration = 7000,\n          _types                 = {\n            DEFAULT    : 'default',\n            INFORMATION: 'information',\n            SUCCESS    : 'success',\n            WARNING    : 'warning',\n            DANGER     : 'danger'\n          },\n          _typeStyleMap          = {\n            'default'    : '',\n            'information': 'toast__information',\n            'success'    : 'toast__success',\n            'warning'    : 'toast__warning',\n            'danger'     : 'toast__danger'\n          },\n          _mountPoint,\n          _template              = require('nori/utils/Templating'),\n          _browserInfo           = require('nudoru/browser/BrowserInfo'),\n          _domUtils              = require('nudoru/browser/DOMUtils'),\n          _componentUtils        = require('nudoru/browser/ThreeDTransforms');\n\n      function initialize(elID) {\n        _mountPoint = document.getElementById(elID);\n      }\n\n      //obj.title, obj.content, obj.type\n      function add(initObj) {\n        initObj.type = initObj.type || _types.DEFAULT;\n\n        var toastObj = createToastObject(initObj.title, initObj.message);\n\n        _children.push(toastObj);\n\n        _mountPoint.insertBefore(toastObj.element, _mountPoint.firstChild);\n\n        assignTypeClassToElement(initObj.type, toastObj.element);\n\n        _componentUtils.apply3DToContainer(_mountPoint);\n        _componentUtils.apply3DToElement(toastObj.element);\n\n        var closeBtn         = toastObj.element.querySelector('.toast__item-controls > button'),\n            closeBtnSteam    = Rx.Observable.fromEvent(closeBtn, _browserInfo.mouseClickEvtStr()),\n            expireTimeStream = Rx.Observable.interval(_defaultExpireDuration);\n\n        toastObj.defaultButtonStream = Rx.Observable.merge(closeBtnSteam, expireTimeStream).take(1)\n          .subscribe(function () {\n            remove(toastObj.id);\n          });\n\n        transitionIn(toastObj.element);\n\n        return toastObj.id;\n      }\n\n      function assignTypeClassToElement(type, element) {\n        if (type !== 'default') {\n          _domUtils.addClass(element, _typeStyleMap[type]);\n        }\n      }\n\n      function createToastObject(title, message) {\n        var id  = 'js__toast-toastitem-' + (_counter++).toString(),\n            obj = {\n              id                 : id,\n              element            : _template.asElement('template__component--toast', {\n                id     : id,\n                title  : title,\n                message: message\n              }),\n              defaultButtonStream: null\n            };\n\n        return obj;\n      }\n\n      function remove(id) {\n        var idx = getObjIndexByID(id),\n            toast;\n\n        if (idx > -1) {\n          toast = _children[idx];\n          rearrange(idx);\n          transitionOut(toast.element);\n        }\n      }\n\n      function transitionIn(el) {\n        TweenLite.to(el, 0, {alpha: 0});\n        TweenLite.to(el, 1, {alpha: 1, ease: Quad.easeOut});\n        rearrange();\n      }\n\n      function transitionOut(el) {\n        TweenLite.to(el, 0.25, {\n          rotationX: -45,\n          alpha    : 0,\n          ease     : Quad.easeIn, onComplete: function () {\n            onTransitionOutComplete(el);\n          }\n        });\n      }\n\n      function onTransitionOutComplete(el) {\n        var idx        = getObjIndexByID(el.getAttribute('id')),\n            toastObj   = _children[idx];\n\n        toastObj.defaultButtonStream.dispose();\n\n        _mountPoint.removeChild(el);\n        _children[idx] = null;\n        _children.splice(idx, 1);\n      }\n\n      function rearrange(ignore) {\n        var i = _children.length - 1,\n            current,\n            y = 0;\n\n        for (; i > -1; i--) {\n          if (i === ignore) {\n            continue;\n          }\n          current = _children[i];\n          TweenLite.to(current.element, 0.75, {y: y, ease: Bounce.easeOut});\n          y += 10 + current.element.clientHeight;\n        }\n      }\n\n      function getObjIndexByID(id) {\n        return _children.map(function (child) {\n          return child.id;\n        }).indexOf(id);\n      }\n\n      function getTypes() {\n        return _types;\n      }\n\n      return {\n        initialize: initialize,\n        add       : add,\n        remove    : remove,\n        type      : getTypes\n      };\n\n    };\n\n    module.exports = ToastView();\n\n  });","/**\n * Created by matt on 5/21/15\n * last updated 7/9/15\n */\n\ndefine('nudoru/component/ToolTipView',\n  function (require, module, exports) {\n\n    var ToolTipView = function () {\n\n      var _children     = [],\n          _counter      = 0,\n          _defaultWidth = 200,\n          _types        = {\n            DEFAULT    : 'default',\n            INFORMATION: 'information',\n            SUCCESS    : 'success',\n            WARNING    : 'warning',\n            DANGER     : 'danger',\n            COACHMARK  : 'coachmark'\n          },\n          _typeStyleMap = {\n            'default'    : '',\n            'information': 'tooltip__information',\n            'success'    : 'tooltip__success',\n            'warning'    : 'tooltip__warning',\n            'danger'     : 'tooltip__danger',\n            'coachmark'  : 'tooltip__coachmark'\n          },\n          _positions    = {\n            T : 'T',\n            TR: 'TR',\n            R : 'R',\n            BR: 'BR',\n            B : 'B',\n            BL: 'BL',\n            L : 'L',\n            TL: 'TL'\n          },\n          _positionMap  = {\n            'T' : 'tooltip__top',\n            'TR': 'tooltip__topright',\n            'R' : 'tooltip__right',\n            'BR': 'tooltip__bottomright',\n            'B' : 'tooltip__bottom',\n            'BL': 'tooltip__bottomleft',\n            'L' : 'tooltip__left',\n            'TL': 'tooltip__topleft'\n          },\n          _mountPoint,\n          _template     = require('nori/utils/Templating'),\n          _domUtils     = require('nudoru/browser/DOMUtils');\n\n      function initialize(elID) {\n        _mountPoint = document.getElementById(elID);\n      }\n\n      //obj.title, obj.content, obj.type, obj.target, obj.position\n      function add(initObj) {\n        initObj.type = initObj.type || _types.DEFAULT;\n\n        var tooltipObj = createToolTipObject(initObj.title,\n          initObj.content,\n          initObj.position,\n          initObj.targetEl,\n          initObj.gutter,\n          initObj.alwaysVisible);\n\n        _children.push(tooltipObj);\n        _mountPoint.appendChild(tooltipObj.element);\n\n        tooltipObj.arrowEl = tooltipObj.element.querySelector('.arrow');\n        assignTypeClassToElement(initObj.type, initObj.position, tooltipObj.element);\n\n        TweenLite.set(tooltipObj.element, {\n          css: {\n            autoAlpha: tooltipObj.alwaysVisible ? 1 : 0,\n            width    : initObj.width ? initObj.width : _defaultWidth\n          }\n        });\n\n        // cache these values, 3d transforms will alter size\n        tooltipObj.width  = tooltipObj.element.getBoundingClientRect().width;\n        tooltipObj.height = tooltipObj.element.getBoundingClientRect().height;\n\n        assignEventsToTargetEl(tooltipObj);\n        positionToolTip(tooltipObj);\n\n        if (tooltipObj.position === _positions.L || tooltipObj.position === _positions.R) {\n          centerArrowVertically(tooltipObj);\n        }\n\n        if (tooltipObj.position === _positions.T || tooltipObj.position === _positions.B) {\n          centerArrowHorizontally(tooltipObj);\n        }\n\n        return tooltipObj.element;\n      }\n\n      function assignTypeClassToElement(type, position, element) {\n        if (type !== 'default') {\n          _domUtils.addClass(element, _typeStyleMap[type]);\n        }\n        _domUtils.addClass(element, _positionMap[position]);\n      }\n\n      function createToolTipObject(title, message, position, target, gutter, alwaysVisible) {\n        var id  = 'js__tooltip-tooltipitem-' + (_counter++).toString(),\n            obj = {\n              id           : id,\n              position     : position,\n              targetEl     : target,\n              alwaysVisible: alwaysVisible || false,\n              gutter       : gutter || 15,\n              elOverStream : null,\n              elOutStream  : null,\n              height       : 0,\n              width        : 0,\n              element      : _template.asElement('template__component--tooltip', {\n                id     : id,\n                title  : title,\n                message: message\n              }),\n              arrowEl      : null\n            };\n\n        return obj;\n      }\n\n      function assignEventsToTargetEl(tooltipObj) {\n        if (tooltipObj.alwaysVisible) {\n          return;\n        }\n\n        tooltipObj.elOverStream = Rx.Observable.fromEvent(tooltipObj.targetEl, 'mouseover')\n          .subscribe(function (evt) {\n            showToolTip(tooltipObj.id);\n          });\n\n        tooltipObj.elOutStream = Rx.Observable.fromEvent(tooltipObj.targetEl, 'mouseout')\n          .subscribe(function (evt) {\n            hideToolTip(tooltipObj.id);\n          });\n      }\n\n      function showToolTip(id) {\n        var tooltipObj = getObjByID(id);\n\n        if (tooltipObj.alwaysVisible) {\n          return;\n        }\n\n        positionToolTip(tooltipObj);\n        transitionIn(tooltipObj.element);\n      }\n\n      function positionToolTip(tooltipObj) {\n        var gutter   = tooltipObj.gutter,\n            xPos     = 0,\n            yPos     = 0,\n            tgtProps = tooltipObj.targetEl.getBoundingClientRect();\n\n        if (tooltipObj.position === _positions.TL) {\n          xPos = tgtProps.left - tooltipObj.width;\n          yPos = tgtProps.top - tooltipObj.height;\n        } else if (tooltipObj.position === _positions.T) {\n          xPos = tgtProps.left + ((tgtProps.width / 2) - (tooltipObj.width / 2));\n          yPos = tgtProps.top - tooltipObj.height - gutter;\n        } else if (tooltipObj.position === _positions.TR) {\n          xPos = tgtProps.right;\n          yPos = tgtProps.top - tooltipObj.height;\n        } else if (tooltipObj.position === _positions.R) {\n          xPos = tgtProps.right + gutter;\n          yPos = tgtProps.top + ((tgtProps.height / 2) - (tooltipObj.height / 2));\n        } else if (tooltipObj.position === _positions.BR) {\n          xPos = tgtProps.right;\n          yPos = tgtProps.bottom;\n        } else if (tooltipObj.position === _positions.B) {\n          xPos = tgtProps.left + ((tgtProps.width / 2) - (tooltipObj.width / 2));\n          yPos = tgtProps.bottom + gutter;\n        } else if (tooltipObj.position === _positions.BL) {\n          xPos = tgtProps.left - tooltipObj.width;\n          yPos = tgtProps.bottom;\n        } else if (tooltipObj.position === _positions.L) {\n          xPos = tgtProps.left - tooltipObj.width - gutter;\n          yPos = tgtProps.top + ((tgtProps.height / 2) - (tooltipObj.height / 2));\n        }\n\n        TweenLite.set(tooltipObj.element, {\n          x: xPos,\n          y: yPos\n        });\n      }\n\n      function centerArrowHorizontally(tooltipObj) {\n        var arrowProps = tooltipObj.arrowEl.getBoundingClientRect();\n        TweenLite.set(tooltipObj.arrowEl, {x: (tooltipObj.width / 2) - (arrowProps.width / 2)});\n      }\n\n      function centerArrowVertically(tooltipObj) {\n        var arrowProps = tooltipObj.arrowEl.getBoundingClientRect();\n        TweenLite.set(tooltipObj.arrowEl, {y: (tooltipObj.height / 2) - (arrowProps.height / 2) - 2});\n      }\n\n      function hideToolTip(id) {\n        var tooltipObj = getObjByID(id);\n\n        if (tooltipObj.alwaysVisible) {\n          return;\n        }\n\n        transitionOut(tooltipObj.element);\n      }\n\n      function transitionIn(el) {\n        TweenLite.to(el, 0.5, {\n          autoAlpha: 1,\n          ease     : Circ.easeOut\n        });\n      }\n\n      function transitionOut(el) {\n        TweenLite.to(el, 0.05, {\n          autoAlpha: 0,\n          ease     : Circ.easeOut\n        });\n      }\n\n      function remove(el) {\n        getObjByElement(el).forEach(function (tooltip) {\n          if (tooltip.elOverStream) {\n            tooltip.elOverStream.dispose();\n          }\n          if (tooltip.elOutStream) {\n            tooltip.elOutStream.dispose();\n          }\n\n          TweenLite.killDelayedCallsTo(tooltip.element);\n\n          _mountPoint.removeChild(tooltip.element);\n\n          var idx = getObjIndexByID(tooltip.id);\n\n          _children[idx] = null;\n          _children.splice(idx, 1);\n        });\n      }\n\n      function getObjByID(id) {\n        return _children.filter(function (child) {\n          return child.id === id;\n        })[0];\n      }\n\n      function getObjIndexByID(id) {\n        return _children.map(function (child) {\n          return child.id;\n        }).indexOf(id);\n      }\n\n      function getObjByElement(el) {\n        return _children.filter(function (child) {\n          return child.targetEl === el;\n        });\n      }\n\n      function getTypes() {\n        return _types;\n      }\n\n      function getPositions() {\n        return _positions;\n      }\n\n      return {\n        initialize: initialize,\n        add       : add,\n        remove    : remove,\n        type      : getTypes,\n        position  : getPositions\n      };\n\n    };\n\n    module.exports = ToolTipView();\n\n  });"],"sourceRoot":"/source/"}