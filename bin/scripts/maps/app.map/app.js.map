{"version":3,"sources":["App.js","action/ActionConstants.js","action/ActionCreator.js","store/AppStore.js","view/AppView.js","view/DebugControlsTestingSubView.js","view/Screen.GameOver.js","view/Screen.MainGame.js","view/Screen.PlayerSelect.js","view/Screen.Title.js","view/Screen.WaitingOnPlayer.js","view/TemplateViewComponent.js","main.js"],"names":[],"mappingspvnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["define('app/App',\n  function (require, module, exports) {\n\n    var _rx = require('nori/utils/Rx');\n\n    /**\n     * \"Controller\" for a Nori application. The controller is responsible for\n     * bootstrapping the app and possibly handling socket/server interaction.\n     * Any additional functionality should be handled in a specific module.\n     */\n    var App = Nori.createApplication({\n\n      mixins: [],\n\n      /**\n       * Create the main Nori App store and view.\n       */\n      store: require('app/store/AppStore'),\n      view : require('app/view/AppView'),\n      socket  : require('nori/service/SocketIO'),\n\n      /**\n       * Intialize the appilcation, view and store\n       */\n      initialize: function () {\n        this.socket.initialize();\n\n        this.view.initialize();\n\n        this.store.initialize(); // store will acquire data dispatch event when complete\n        this.store.subscribe('storeInitialized', this.onStoreInitialized.bind(this));\n        this.store.loadStore();\n      },\n\n      /**\n       * After the store data is ready\n       */\n      onStoreInitialized: function () {\n        this.runApplication();\n      },\n\n      /**\n       * Remove the \"Please wait\" cover and start the app\n       */\n      runApplication: function () {\n        this.view.removeLoadingMessage();\n        this.view.render();\n\n        // View will show based on the current store state\n        this.store.setState({currentState:'PLAYER_SELECT'});\n\n        //_rx.interval(500).take(5).subscribe(function() {\n        //  this.socket.ping();\n        //}.bind(this));\n        //_rx.doEvery(1000, function() {\n        //  this.socket.ping();\n        //}.bind(this));\n      },\n\n      /**\n       * All messages from the Socket.IO server will be forwarded here\n       * @param payload\n       */\n      handleSocketMessage: function (payload) {\n        if (!payload) {\n          return;\n        }\n\n        console.log(\"from Socket.IO server\", payload);\n\n        switch (payload.type) {\n          case (this.socket.events().CONNECT):\n            console.log(\"Connected!\");\n            this.store.setState({socketIOID: payload.id});\n            return;\n          case (this.socket.events().USER_CONNECTED):\n            console.log(\"Another client connected\");\n            return;\n          case (this.socket.events().USER_DISCONNECTED):\n            console.log(\"Another client disconnected\");\n            return;\n          case (this.socket.events().DROPPED):\n            console.log(\"You were dropped!\", payload.payload);\n            return;\n          case (this.socket.events().SYSTEM_MESSAGE):\n            console.log(\"System message\", payload.payload);\n            return;\n          case (this.socket.events().CREATE_ROOM):\n            console.log(\"create room\");\n            return;\n          case (this.socket.events().JOIN_ROOM):\n            console.log(\"join room\");\n            return;\n          case (this.socket.events().LEAVE_ROOM):\n            console.log(\"leave room\");\n            return;\n          default:\n            console.warn(\"Unhandled SocketIO message type\", payload);\n            return;\n        }\n      }\n\n    });\n\n    module.exports = App;\n\n  });","define('app/action/ActionConstants',\n  function (require, module, exports) {\n    var objUtils = require('nudoru/core/ObjectUtils');\n\n    /**\n     * Event name string constants\n     */\n\n    _.merge(module.exports, objUtils.keyMirror({\n      CHANGE_GAME_STATE: null,\n      LOCAL_PLAYER_CONNECT: null,\n      SELECT_PLAYER: null,\n      REMOTE_PLAYER_CONNECT: null,\n      GAME_START: null,\n      LOCAL_QUESTION: null,\n      REMOTE_QUESTION: null,\n      LOCAL_PLAYER_HEALTH_CHANGE: null,\n      REMOTE_PLAYER_HEALTH_CHANGE: null,\n      GAME_OVER: null\n    }));\n  });","define('app/Action/ActionCreator',\n  function (require, module, exports) {\n\n    var _actionConstants = require('app/action/ActionConstants');\n\n    /**\n     * Purely for convenience, an Event (\"action\") Creator ala Flux spec. Follow\n     * guidelines for creating actions: https://github.com/acdlite/flux-standard-action\n     */\n    var ActionCreator = {\n\n      mutateSomeData: function (data) {\n        var actionObj = {\n          type   : _actionConstants.MUTATION_TYPE,\n          payload: {\n            data: data\n          }\n        };\n\n        return actionObj;\n      }\n\n    };\n\n    module.exports = ActionCreator;\n\n  });","define('app/store/AppStore',\n  function (require, module, exports) {\n\n    var _noriActionConstants     = require('nori/action/ActionConstants'),\n        _mixinMapFactory        = require('nori/store/MixinMapFactory'),\n        _mixinObservableSubject = require('nori/utils/MixinObservableSubject'),\n        _mixinReducerStore      = require('nori/store/MixinReducerStore');\n\n    /**\n     * This application store contains \"reducer store\" functionality based on Redux.\n     * The store state may only be changed from events as applied in reducer functions.\n     * The store received all events from the event bus and forwards them to all\n     * reducer functions to modify state as needed. Once they have run, the\n     * handleStateMutation function is called to dispatch an event to the bus, or\n     * notify subscribers via an observable.\n     *\n     * Events => handleApplicationEvents => applyReducers => handleStateMutation => Notify\n     */\n    var AppStore = Nori.createStore({\n\n      mixins: [\n        _mixinMapFactory,\n        _mixinReducerStore,\n        _mixinObservableSubject()\n      ],\n\n      gameStates: ['TITLE', 'PLAYER_SELECT', 'WAITING_ON_PLAYER', 'MAIN_GAME', 'GAME_OVER'],\n\n      initialize: function () {\n        this.addReducer(this.defaultReducerFunction);\n        this.initializeReducerStore();\n        this.setState(Nori.config());\n        this.createSubject('storeInitialized');\n      },\n\n      /**\n       * Set or load any necessary data and then broadcast a initialized event.\n       */\n      loadStore: function () {\n        this.setState({\n          currentState: this.gameStates[0],\n          localPlayer : {},\n          remotePlayer: {},\n          questionBank: []\n        });\n\n        this.notifySubscribersOf('storeInitialized');\n      },\n\n      createUserObject: function (id, type, name, appearance, behaviors) {\n        return {\n          id        : id,\n          type      : type,\n          name      : name,\n          health    : health || 6,\n          appearance: appearance,\n          behaviors : behaviors || []\n        };\n      },\n\n      createQuestionObject: function (prompt, distractors, pointValue) {\n        return {\n          prompt     : prompt,\n          distractors: distractors,\n          pointValue : pointValue\n        };\n      },\n\n      /**\n       * Modify state based on incoming events. Returns a copy of the modified\n       * state and does not modify the state directly.\n       * Can compose state transformations\n       * return _.assign({}, state, otherStateTransformer(state));\n       * @param state\n       * @param event\n       * @returns {*}\n       */\n      defaultReducerFunction: function (state, event) {\n        state = state || {};\n\n        switch (event.type) {\n\n          case _noriActionConstants.CHANGE_STORE_STATE:\n            return _.assign({}, state, event.payload.data);\n\n          default:\n            return state;\n        }\n      },\n\n      /**\n       * Called after all reducers have run to broadcast possible updates. Does\n       * not check to see if the state was actually updated.\n       */\n      handleStateMutation: function () {\n        this.notifySubscribers(this.getState());\n      }\n\n    });\n\n    module.exports = AppStore();\n\n  });\n","define('app/view/AppView',\n  function (require, module, exports) {\n\n    var _appStore               = require('app/store/AppStore'),\n        _mixinApplicationView   = require('nori/view/ApplicationView'),\n        _mixinNudoruControls    = require('nori/view/MixinNudoruControls'),\n        _mixinComponentViews    = require('nori/view/MixinComponentViews'),\n        _mixinStoreStateViews   = require('nori/view/MixinStoreStateViews'),\n        _mixinEventDelegator    = require('nori/view/MixinEventDelegator'),\n        _mixinObservableSubject = require('nori/utils/MixinObservableSubject');\n\n    /**\n     * View for an application.\n     */\n\n    var AppView = Nori.createView({\n\n      mixins: [\n        _mixinApplicationView,\n        _mixinNudoruControls,\n        _mixinComponentViews,\n        _mixinStoreStateViews,\n        _mixinEventDelegator(),\n        _mixinObservableSubject()\n      ],\n\n      initialize: function () {\n        this.initializeApplicationView(['applicationscaffold', 'applicationcomponentsscaffold']);\n        this.initializeStateViews(_appStore);\n        this.initializeNudoruControls();\n\n        this.configureViews();\n      },\n\n      configureViews: function () {\n        var screenTitle           = require('app/view/Screen.Title')(),\n            screenPlayerSelect    = require('app/view/Screen.PlayerSelect')(),\n            screenWaitingOnPlayer = require('app/view/Screen.WaitingOnPlayer')(),\n            screenMainGame        = require('app/view/Screen.MainGame')(),\n            screenGameOver        = require('app/view/Screen.GameOver')(),\n            gameStates            = _appStore.gameStates;\n\n        this.setViewMountPoint('#contents');\n\n        this.mapStateToViewComponent(gameStates[0], 'title', screenTitle);\n        this.mapStateToViewComponent(gameStates[1], 'playerselect', screenPlayerSelect);\n        this.mapStateToViewComponent(gameStates[2], 'waitingonplayer', screenWaitingOnPlayer);\n        this.mapStateToViewComponent(gameStates[3], 'game', screenMainGame);\n        this.mapStateToViewComponent(gameStates[4], 'gameover', screenGameOver);\n\n      },\n\n      /**\n       * Draw and UI to the DOM and set events\n       */\n      render: function () {\n        //\n      },\n\n    });\n\n    module.exports = AppView();\n\n  });","/**\n * A template for a subview/route controller\n */\n\ndefine('app/view/DebugControlsTestingSubView',\n  function (require, module, exports) {\n\n    /**\n     * Module for testing Nudoru component classes and any thing else\n     */\n    var DebugComponent = function () {\n\n      var _lIpsum             = require('nudoru/browser/Lorem'),\n          _toolTip            = require('nudoru/component/ToolTipView'),\n          _noriActionConstants = require('nori/action/ActionConstants'),\n          _actionOneEl,\n          _actionTwoEl,\n          _actionThreeEl,\n          _actionFourEl,\n          _actionFiveEl,\n          _actionSixEl;\n\n      function initialize(initObj) {\n        _lIpsum.initialize();\n      }\n\n      function componentDidMount() {\n        console.log(this.getID() + ', subview did mount');\n\n        _actionOneEl   = document.getElementById('action-one');\n        _actionTwoEl   = document.getElementById('action-two');\n        _actionThreeEl = document.getElementById('action-three');\n        _actionFourEl  = document.getElementById('action-four');\n        _actionFiveEl  = document.getElementById('action-five');\n        _actionSixEl   = document.getElementById('action-six');\n\n        //_toolTip.add({title:'', content:\"This is a button, it's purpose is unknown.\", position:'TR', targetEl: _actionFourEl, type:'information'});\n        //_toolTip.add({title:'', content:\"This is a button, click it and rainbows will appear.\", position:'BR', targetEl: _actionFourEl, type:'success'});\n        //_toolTip.add({title:'', content:\"This is a button, it doesn't make a sound.\", position:'BL', targetEl: _actionFourEl, type:'warning'});\n        //_toolTip.add({title:'', content:\"This is a button, behold the magic and mystery.\", position:'TL', targetEl: _actionFourEl, type:'danger'});\n\n        _toolTip.add({\n          title   : '',\n          content : \"This is a button, you click it dummy. This is a button, you click it dummy. \",\n          position: 'L',\n          targetEl: _actionFourEl,\n          type    : 'information'\n        });\n        _toolTip.add({\n          title   : '',\n          content : \"This is a button, you click it dummy. This is a button, you click it dummy. \",\n          position: 'B',\n          targetEl: _actionFourEl,\n          type    : 'information'\n        });\n        _toolTip.add({\n          title   : '',\n          content : \"This is a button, you click it dummy. This is a button, you click it dummy. This is a button, you click it dummy. \",\n          position: 'R',\n          targetEl: _actionFourEl,\n          type    : 'information'\n        });\n        _toolTip.add({\n          title   : '',\n          content : \"This is a button, you click it dummy. This is a button, you click it dummy. This is a button, you click it dummy. This is a button, you click it dummy. \",\n          position: 'T',\n          targetEl: _actionFourEl,\n          type    : 'information'\n        });\n\n\n        _actionOneEl.addEventListener('click', function actOne(e) {\n          Nori.view().addMessageBox({\n            title  : _lIpsum.getSentence(2, 4),\n            content: _lIpsum.getParagraph(2, 4),\n            type   : 'warning',\n            modal  : true,\n            width  : 500\n          });\n        });\n\n        _actionTwoEl.addEventListener('click', function actTwo(e) {\n          Nori.view().addMessageBox({\n            title  : _lIpsum.getSentence(10, 20),\n            content: _lIpsum.getParagraph(2, 4),\n            type   : 'default',\n            modal  : false,\n            buttons: [\n              {\n                label  : 'Yes',\n                id     : 'yes',\n                type   : 'default',\n                icon   : 'check',\n                onClick: function () {\n                  console.log('yes');\n                }\n              },\n              {\n                label  : 'Maybe',\n                id     : 'maybe',\n                type   : 'positive',\n                icon   : 'cog',\n                onClick: function () {\n                  console.log('maybe');\n                }\n              },\n              {\n                label: 'Nope',\n                id   : 'nope',\n                type : 'negative',\n                icon : 'times'\n              }\n            ]\n          });\n        });\n\n        _actionThreeEl.addEventListener('click', function actThree(e) {\n          Nori.view().addNotification({\n            title  : _lIpsum.getSentence(3, 6),\n            type   : 'information',\n            content: _lIpsum.getParagraph(1, 2)\n          });\n\n          _toolTip.remove(_actionFourEl);\n        });\n\n        _actionFourEl.addEventListener('click', function actFour(e) {\n          console.log('Four');\n        });\n\n        _actionFiveEl.addEventListener('click', function actFour(e) {\n          Nori.dispatcher().publish({\n            type   : _noriActionConstants.CHANGE_ROUTE,\n            payload: {\n              route: '/one',\n              data : {prop: 'some data', moar: '25'}\n            }\n          });\n        });\n\n        _actionSixEl.addEventListener('click', function actFour(e) {\n          Nori.dispatcher().publish({\n            type   : _noriActionConstants.CHANGE_ROUTE,\n            payload: {route: '/styles', data: 'test'}\n          });\n        });\n\n      }\n\n      return {\n        initialize       : initialize,\n        componentDidMount: componentDidMount\n      };\n\n    };\n\n    module.exports = DebugComponent;\n\n\n  });","define('app/view/Screen.GameOver',\n  function (require, module, exports) {\n\n    var _noriActions = require('nori/action/ActionCreator'),\n        _appView         = require('app/view/AppView'),\n        _appStore        = require('app/store/AppStore');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n    var Component = _appView.createComponentView({\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      defineEvents: function () {\n        return {\n          'click #gameover__button-replay': function () {\n            _appStore.apply(_noriActions.changeStoreState({currentState: _appStore.gameStates[1]}));\n          }\n        };\n      },\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return _appStore.getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = _appStore.getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n        //\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        //\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","define('app/view/Screen.MainGame',\n  function (require, module, exports) {\n\n    var _noriActions = require('nori/action/ActionCreator'),\n        _appView         = require('app/view/AppView'),\n        _appStore        = require('app/store/AppStore');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n    var Component = _appView.createComponentView({\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      defineEvents: function () {\n        return {\n          'click #game__button-skip': function () {\n            _appStore.apply(_noriActions.changeStoreState({currentState: _appStore.gameStates[4]}));\n          }\n        };\n      },\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return _appStore.getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = _appStore.getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        //\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","define('app/view/Screen.PlayerSelect',\n  function (require, module, exports) {\n\n    var _noriActions = require('nori/action/ActionCreator'),\n        _appView         = require('app/view/AppView'),\n        _appStore        = require('app/store/AppStore');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n    var Component = _appView.createComponentView({\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      defineEvents: function () {\n        return {\n          'click #select__button-joinroom'  : this.onJoinRoom.bind(this),\n          'click #select__button-createroom': this.onCreateRoom.bind(this),\n          'click #select__button-go'        : function () {\n            _appStore.apply(_noriActions.changeStoreState({currentState: _appStore.gameStates[2]}));\n          }\n        };\n      },\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return _appStore.getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = _appStore.getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n\n      },\n\n      onJoinRoom: function () {\n        var roomID = document.querySelector('#select__roomid').value;\n        console.log('Join room ' + roomID);\n        if (this.validateRoomID(roomID)) {\n          console.log('Room ID OK');\n          _appView.notify('', 'Room ID ok!');\n        } else {\n          _appView.alert('Bad Room ID', 'The room ID is not correct. Must be a 5 digit number.');\n        }\n      },\n\n      /**\n       * Room ID must be an integer and 5 digits\n       * @param roomID\n       * @returns {boolean}\n       */\n      validateRoomID: function (roomID) {\n        if (isNaN(parseInt(roomID))) {\n          return false;\n        } else if (roomID.length !== 5) {\n          return false;\n        }\n        return true;\n      },\n\n      onCreateRoom: function () {\n        console.log('create room');\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        //\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","define('app/view/Screen.Title',\n  function (require, module, exports) {\n\n    var _noriActions = require('nori/action/ActionCreator'),\n        _appView         = require('app/view/AppView'),\n        _appStore        = require('app/store/AppStore');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n    var Component = _appView.createComponentView({\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      defineEvents: function () {\n        return {\n          'click #title__button-start': function () {\n            _appStore.apply(_noriActions.changeStoreState({currentState: _appStore.gameStates[1]}));\n          }\n        };\n      },\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return _appStore.getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = _appStore.getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n        //\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        //\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","define('app/view/Screen.WaitingOnPlayer',\n  function (require, module, exports) {\n\n    var _noriActions = require('nori/action/ActionCreator'),\n        _appView         = require('app/view/AppView'),\n        _appStore        = require('app/store/AppStore');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n    var Component = _appView.createComponentView({\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      defineEvents: function () {\n        return {\n          'click #waiting__button-skip': function () {\n            _appStore.apply(_noriActions.changeStoreState({currentState: _appStore.gameStates[3]}));\n          }\n        };\n      },\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return _appStore.getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = _appStore.getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n        //\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        //\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","define('app/view/TemplateViewComponent',\n  function (require, module, exports) {\n\n    var view = require('app/view/AppView');\n\n    /**\n     * Module for a dynamic application view for a route or a persistent view\n     */\n\n    var Component = view.createComponentView({\n      /**\n       * Mixins are other modules/objects that multiple components share, provides\n       * common functionality between then.\n       */\n      //mixins: [\n      //  {\n      //    render: function () {\n      //      return '<h1>MIXIN!</h1>';\n      //    }\n      //  }\n      //],\n\n      /**\n       * Initialize and bind, called once on first render. Parent component is\n       * initialized from app view\n       * @param configProps\n       */\n      initialize: function (configProps) {\n        //Bind to a map, update will be called on changes to the map\n        //this.bindMap(map id string or map object);\n        //this.bindMap(APP.store());\n        //custom init below here\n        //this.setTemplate('<h1>{{ greeting }}</h1>'); // set custom HTML template\n      },\n\n      /**\n       * Create an object to be used to define events on DOM elements\n       * @returns {}\n       */\n      //defineEvents: function() {\n      //  return {\n      //    'click #button-id': handleButton\n      //  };\n      //},\n\n      /**\n       * Set initial state properties. Call once on first render\n       */\n      getInitialState: function () {\n        return APP.store().getState();\n      },\n\n      /**\n       * State change on bound stores (map, etc.) Return nextState object\n       */\n      componentWillUpdate: function () {\n        var nextState = APP.store().getState();\n        nextState.greeting += ' (updated)';\n        return nextState;\n      },\n\n      /**\n       * Determine if update/redraw should occur\n       * @param nextState\n       * @returns {*}\n       */\n      //shouldComponentUpdate: function(nextState) {\n      //  // Test for differences between nextState and this.getState()\n      //},\n\n      /**\n       * Render override must return HTML.\n       */\n      //render: function() {\n      //  var state = this.getState();\n      //  return '<h1>'+state.greeting+'</h1>';\n      //},\n\n      /**\n       * Component HTML was attached to the DOM\n       */\n      componentDidMount: function () {\n       //\n      },\n\n      /**\n       * Component will be removed from the DOM\n       */\n      componentWillUnmount: function () {\n        // Clean up\n      }\n\n    });\n\n    module.exports = Component;\n\n  });","/**\n * Initial file for the Application\n */\n\n(function () {\n\n  var _browserInfo = require('nudoru/browser/BrowserInfo');\n\n  /**\n   * IE versions 9 and under are blocked, others are allowed to proceed\n   */\n  if(_browserInfo.notSupported || _browserInfo.isIE9) {\n\n    document.querySelector('body').innerHTML = '<h3>For the best experience, please use Internet Explorer 10+, Firefox, Chrome or Safari to view this application.</h3>';\n\n  } else {\n\n    /**\n     * Create the application module and initialize\n     */\n    window.onload = function() {\n      window.APP = require('app/App');\n      APP.initialize();\n    };\n\n  }\n\n}());"],"sourceRoot":"/source/"}